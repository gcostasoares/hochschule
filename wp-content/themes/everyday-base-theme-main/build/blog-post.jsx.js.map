{"version":3,"file":"blog-post.jsx.js","mappings":"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","sources":["webpack://base-theme/./node_modules/@wordpress/icons/build-module/library/post-list.js","webpack://base-theme/external window [\"wp\",\"blockEditor\"]","webpack://base-theme/external window [\"wp\",\"blocks\"]","webpack://base-theme/external window [\"wp\",\"components\"]","webpack://base-theme/external window [\"wp\",\"coreData\"]","webpack://base-theme/external window [\"wp\",\"data\"]","webpack://base-theme/external window [\"wp\",\"primitives\"]","webpack://base-theme/external window \"ReactJSXRuntime\"","webpack://base-theme/webpack/bootstrap","webpack://base-theme/webpack/runtime/compat get default export","webpack://base-theme/webpack/runtime/define property getters","webpack://base-theme/webpack/runtime/hasOwnProperty shorthand","webpack://base-theme/webpack/runtime/make namespace object","webpack://base-theme/./blocks/components/blog-post/blog-post.jsx"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Path, SVG } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst postList = /*#__PURE__*/_jsx(SVG, {\n  viewBox: \"0 0 24 24\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"M18 5.5H6a.5.5 0 0 0-.5.5v12a.5.5 0 0 0 .5.5h12a.5.5 0 0 0 .5-.5V6a.5.5 0 0 0-.5-.5ZM6 4h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2Zm1 5h1.5v1.5H7V9Zm1.5 4.5H7V15h1.5v-1.5ZM10 9h7v1.5h-7V9Zm7 4.5h-7V15h7v-1.5Z\"\n  })\n});\nexport default postList;\n//# sourceMappingURL=post-list.js.map","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"primitives\"];","module.exports = window[\"ReactJSXRuntime\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { useSelect } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { registerBlockType } from '@wordpress/blocks';\nimport { postList } from '@wordpress/icons';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    PanelBody,\n    PanelRow,\n    SelectControl,\n    TextControl,\n} from '@wordpress/components';\nregisterBlockType('basetheme/blog-post', {\n    title: 'Blog-post',\n    icon: postList,\n    category: 'layout',\n    parent: ['base-theme/container'],\n    description: 'A Description',\n    keywords: '[]',\n    supports: {},\n    attributes: {\n        postType: {\n            type: 'string',\n            default: 'post',\n        },\n        postPerPage: {\n            type: 'number',\n            default: 6,\n        },\n        orderby: {\n            type: 'string',\n            default: 'post_date',\n        },\n        oder: {\n            type: 'string',\n            default: 'desc',\n        },\n    },\n\n    edit: EditComponent,\n    save: () => null,\n});\n\nfunction EditComponent(props) {\n    const { attributes, setAttributes } = props;\n\n    // postType defined in block.json\n    const { postType } = attributes;\n\n    // useSelect to retrieve all post types\n    const postTypes = useSelect(\n        (select) => select(coreStore).getPostTypes({ per_page: -1 }),\n        []\n    );\n\n    // Options expects [{label: ..., value: ...}]\n    const postTypeOptions = !Array.isArray(postTypes)\n        ? postTypes\n        : postTypes\n              .filter(\n                  // Filter out internal WP post types eg: wp_block, wp_navigation, wp_template, wp_template_part..\n                  (type) => type.viewable === true\n              )\n              .map(\n                  // Format the options for display in the <SelectControl/>\n                  (type) => ({\n                      label: type.labels.singular_name,\n                      value: type.slug, // the value saved as postType in attributes\n                  })\n              );\n\n    // TODO: How to get back all post types of the page?\n\n    return (\n        <>\n            <InspectorControls>\n                <PanelBody title=\"Blog Post Settings\">\n                    <PanelRow>\n                        <SelectControl\n                            label=\"Select a Post Type\"\n                            value={postType}\n                            options={postTypeOptions}\n                            onChange={(value) =>\n                                setAttributes({ postType: value })\n                            }\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <TextControl\n                            label=\"Posts per Page\"\n                            value={attributes.postPerPage}\n                            onChange={(value) =>\n                                setAttributes({ postPerPage: value })\n                            }\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <SelectControl\n                            label=\"Order By\"\n                            value={attributes.orderby}\n                            options={[\n                                { label: 'Date', value: 'post_date' },\n                                { label: 'Title', value: 'post_title' },\n                                { label: 'Menu Order', value: 'menu_order' },\n                                {\n                                    label: 'Last Modified',\n                                    value: 'modified',\n                                },\n                                {\n                                    label: 'Comment Count',\n                                    value: 'comment_count',\n                                },\n                                { label: 'Random', value: 'rand' },\n                            ]}\n                            onChange={(value) =>\n                                setAttributes({ orderby: value })\n                            }\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <SelectControl\n                            label=\"Order\"\n                            value={attributes.order}\n                            options={[\n                                { label: 'Ascending', value: 'asc' },\n                                { label: 'Descending', value: 'desc' },\n                            ]}\n                            onChange={(value) =>\n                                setAttributes({ order: value })\n                            }\n                        />\n                    </PanelRow>\n                </PanelBody>\n            </InspectorControls>\n\n            <div className=\"blog-post\">\n                <h2>Blog Post</h2>\n                <p className=\"alert alert-warning\">\n                    Post Types werden im Backend zurzeit nicht angezeigt.\n                </p>\n            </div>\n        </>\n    );\n}\n"],"names":["useSelect","store","coreStore","registerBlockType","postList","InspectorControls","PanelBody","PanelRow","SelectControl","TextControl","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","title","icon","category","parent","description","keywords","supports","attributes","postType","type","default","postPerPage","orderby","oder","edit","EditComponent","save","props","setAttributes","postTypes","select","getPostTypes","per_page","postTypeOptions","Array","isArray","filter","viewable","map","label","labels","singular_name","value","slug","children","options","onChange","order","className"],"sourceRoot":""}